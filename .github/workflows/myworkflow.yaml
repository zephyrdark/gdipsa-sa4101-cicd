# workflow
name: Test

# trigger
on:
  push:
    branches: ['release/v[0-9]+.[0-9]+']

jobs:

  # name of jobs
  if-no-vulnerabilities-build-push-notify-else-upload-report-notify:
    runs-on: ubuntu-latest
    # condition for not running pipeline if commit message starts with #NORUN.
    if: ${{ !startsWith(github.event.head_commit.message, '#NORUN') }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # 1. scan-code-for-vulnerabilities
    - name: Aqua Security Trivy Scan for Vulnerability
      id: step-trivy-scan
      uses: aquasecurity/trivy-action@0.19.0
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'table'
        severity: ${{ vars.TRIVY_SEVERITY_TEST_SUBMISSION }} # set severity in repo variables. current=CRITICAL
        output: trivy-report.txt
        exit-code: '1'
      continue-on-error: true

    # 1a. VULNERABILITY DETECTED - send report to slack.
    - name: Vulnerability Detected - Send Slack Notification
      if: steps.step-trivy-scan.outcome == 'failure' && steps.step-trivy-scan.conclusion == 'success'
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_TEST_SUBMISSION }}
        SLACK_TITLE: Scan failed - ${{ secrets.AUTHOR_NAME }} 
        SLACK_MESSAGE: 'Failed trivy scan, see uploaded report'
        SLACK_COLOR: ${{ job.status }}

    # 1b. VULNERABILITY DETECTED - upload file to slack
    - name: Vulnerability Detected - Upload Scan to Slack
      if: steps.step-trivy-scan.outcome == 'failure' && steps.step-trivy-scan.conclusion == 'success'
      uses: MeilCli/slack-upload-file@v4.0.6
      with:
        slack_token: ${{ secrets.SLACK_TOKEN_TEST_SUBMISSION }}
        channel_id: ${{ secrets.SLACK_CHANNEL_ID_TEST_SUBMISSION }}
        file_path: 'trivy-report.txt'
        initial_comment: 'Scan report by ${{ secrets.AUTHOR_NAME }}'

    # 1c. VULNERABILITY DETECTED - terminate workflow
    - name: Vulnerability Detected - Terminate Workflow
      if: steps.step-trivy-scan.outcome == 'failure' && steps.step-trivy-scan.conclusion == 'success'
      uses: andymckay/cancel-action@0.4

    # 2. NO VULNERABILITY - proceed to build and push container

    # as per docker/build-push-action example
    - name: Build - Login to Docker Hub
      uses: docker/login-action@v3.1.0
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # build and push image using docker/build-push-action
    - name: Build and push to Docker
      id: build-and-push
      uses: docker/build-push-action@v5.3.0
      with:
        context: ./${{ vars.DOCKER_IMAGE_NAME }}
        push: true
        tags: ${{ secrets.DOCKERHUB_USER_ID }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ github.sha }}

    # 3. Install cosign
    - name: Sign - Cosign-installer
      id: cosign-install
      uses: sigstore/cosign-installer@v3.5.0

    # 4. Sign image using cosign
    - name: Sign - Cosign Sign Image with Key
      id: cosign-sign
      run: |
          cosign sign --yes --key  env://COSIGN_PRIVATE_KEY ${{ secrets.DOCKERHUB_USER_ID }}/${{ vars.DOCKER_IMAGE_NAME }}@${DIGEST}
      env:
        COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        DIGEST: ${{ steps.build-and-push.outputs.digest }}

    # 5. Send success notification to Slack
    - name: Workflow Completed - Send Slack Notification
      if: steps.build-and-push.conclusion == 'success' && steps.cosign-sign.conclusion == 'success'
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_TEST_SUBMISSION }}
        SLACK_TITLE: Image built and signed
        SLACK_MESSAGE: "*Name:* ${{ secrets.AUTHOR_NAME }}\n*Matriculation:* ${{ secrets.AUTHOR_MATRI_NO }}\n*Email:* ${{ secrets.AUTHOR_EMAIL }}\n*Git:* ${{ github.server_url }}/${{ github.repository }}\n*Image:* https://hub.docker.com/r/${{ secrets.DOCKERHUB_USER_ID }}/${{ vars.DOCKER_IMAGE_NAME }}"
        SLACK_COLOR: ${{ job.status }}